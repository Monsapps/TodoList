<?php
/**
 * TaskService
 * 
 * Business code for Task
 */
namespace App\Service;

use App\Entity\Task;
use App\Entity\User;
use Doctrine\Persistence\ManagerRegistry;
use Psr\Log\LoggerInterface;

class TaskService
{

    private $managerRegistry;
    private $logger;

    public function __construct(ManagerRegistry $managerRegistry, LoggerInterface $logger)
    {
        $this->managerRegistry = $managerRegistry;
        $this->logger = $logger;
    }

    /**
     * Create new Task
     * 
     * @return Task
     */
    public function createTask(): Task
    {
        return new Task();
    }

    /**
     * Get tasks todo list
     * 
     * @return Task[]
     */
    public function getTasksTodoList(): array
    {
        $taskRepository = $this->managerRegistry->getRepository(Task::class);

        /** @var TaskRepository $taskRepository */
        $tasks = $taskRepository->findTasksTodo();

        return $tasks;
    }

    /**
     * Get tasks done list
     * 
     * @return Task[]
     */
    public function getTasksDoneList(): array
    {
        $taskRepository = $this->managerRegistry->getRepository(Task::class);

        /** @var TaskRepository $taskRepository */
        $tasks = $taskRepository->findTasksDone();

        return $tasks;
    }

    /**
     * Attach user to task and persist task to database
     * 
     * @param Task $task the task generated by TaskType
     * @param User|null $user the current user
     * @return bool true: succeeded|false: failed 
     */
    public function addTask(Task $task, ?User $user): bool
    {
        $entityManager = $this->managerRegistry->getManager();

        if($user === null) {
            $this->logger->critical('This condition should not be called', [
                'class' => 'TaskService',
                'method' => 'addTask',
                'conditions' => 'No authenticated user'
            ]);
            return false;
        }
        
        $task->setUser($user);

        $entityManager->persist($task);
        $entityManager->flush();
        return true;
    }

    /**
     * Update task to database
     * 
     * @param User|null $user the current user
     * @return bool true: succeeded|false: failed 
     */
    public function updateTask(?User $user): bool
    {

        if($user === null) {
            $this->logger->critical('This condition should not be called', [
                'class' => 'TaskService',
                'method' => 'updateTask',
                'conditions' => 'No authenticated user'
            ]);
            return false;
        }

        $this->managerRegistry->getManager()->flush();
        return true;
    }

    /**
     * Update active status of task to database
     * 
     * @param Task $task the task to update status
     * @param User|null $user the current user
     * @return bool true: succeeded|false: failed 
     */
    public function toggleTask(Task $task, ?User $user): bool
    {

        if($user === null) {
            $this->logger->critical('This condition should not be called', [
                'class' => 'TaskService',
                'method' => 'toggleTask',
                'conditions' => 'No authenticated user'
            ]);
            return false;
        }

        $task->toggle(!$task->isDone());

        $entityManager = $this->managerRegistry->getManager();
        $entityManager->flush();
        return true;
    }

    /**
     * Delete task to database
     * 
     * @param Task $task the task to delete
     * @param User|null $user the current user
     * @return bool true: succeeded|false: failed 
     */
    public function deleteTask(Task $task, ?User $user): bool
    {

        if($user === null) {
            $this->logger->critical('This condition should not be called', [
                'class' => 'TaskService',
                'method' => 'deleteTask',
                'conditions' => 'No authenticated user'
            ]);
            return false;

        }

        if($task->getUser() !== null && $task->getUser() != $user) {
            $this->logger->critical('This condition should not be called', [
                'class' => 'TaskService',
                'method' => 'deleteTask',
                'conditions' => 'Task author is different to current user'
            ]);
            return false;
        }

        if($task->getUser() === null && !in_array('ROLE_ADMIN', $user->getRoles()) ) {
            $this->logger->critical('This condition should not be called', [
                'class' => 'TaskService',
                'method' => 'deleteTask',
                'conditions' => 'Task anonymous author can be deleted by admin'
            ]);
            return false;
        }

        $entityManager = $this->managerRegistry->getManager();
        $entityManager->remove($task);
        $entityManager->flush();
        return true;
    }

}